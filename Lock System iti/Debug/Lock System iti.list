
Lock System iti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ec4  08000ec4  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec4  08000ec4  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec4  08000ec4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec4  08000ec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08000ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000004c  08000f18  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f18  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001064  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000058e  00000000  00000000  000210d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007e8  00000000  00000000  00021667  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000168  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00021fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001517  00000000  00000000  000220c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001885  00000000  00000000  000235df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000048a2  00000000  00000000  00024e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00029706  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000418  00000000  00000000  00029784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000004c 	.word	0x2000004c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dfc 	.word	0x08000dfc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000050 	.word	0x20000050
 800016c:	08000dfc 	.word	0x08000dfc

08000170 <Keypad_GPIO_Init>:
 *                                             ============================
 */

//===============================<Keypad_GPIO_Init Function>
void Keypad_GPIO_Init ()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	GPIO_Config_t KeyPad_Pins;
	int i;

	//==============================Set Inputs
	//R0
	KeyPad_Pins.GPIO_PinNumber = R0;
 8000176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800017a:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017c:	2304      	movs	r3, #4
 800017e:	70bb      	strb	r3, [r7, #2]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000180:	2301      	movs	r3, #1
 8000182:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(GPIOA, &KeyPad_Pins);
 8000184:	463b      	mov	r3, r7
 8000186:	4619      	mov	r1, r3
 8000188:	483e      	ldr	r0, [pc, #248]	; (8000284 <Keypad_GPIO_Init+0x114>)
 800018a:	f000 fd6c 	bl	8000c66 <MCAL_GPIO_INIT>
	//R1
	KeyPad_Pins.GPIO_PinNumber = R1;
 800018e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000192:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000194:	2304      	movs	r3, #4
 8000196:	70bb      	strb	r3, [r7, #2]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000198:	2301      	movs	r3, #1
 800019a:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(GPIOA, &KeyPad_Pins);
 800019c:	463b      	mov	r3, r7
 800019e:	4619      	mov	r1, r3
 80001a0:	4838      	ldr	r0, [pc, #224]	; (8000284 <Keypad_GPIO_Init+0x114>)
 80001a2:	f000 fd60 	bl	8000c66 <MCAL_GPIO_INIT>
	//R2
	KeyPad_Pins.GPIO_PinNumber = R2;
 80001a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001aa:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ac:	2304      	movs	r3, #4
 80001ae:	70bb      	strb	r3, [r7, #2]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001b0:	2301      	movs	r3, #1
 80001b2:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(GPIOA, &KeyPad_Pins);
 80001b4:	463b      	mov	r3, r7
 80001b6:	4619      	mov	r1, r3
 80001b8:	4832      	ldr	r0, [pc, #200]	; (8000284 <Keypad_GPIO_Init+0x114>)
 80001ba:	f000 fd54 	bl	8000c66 <MCAL_GPIO_INIT>
	//R3
	KeyPad_Pins.GPIO_PinNumber = R3;
 80001be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001c2:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c4:	2304      	movs	r3, #4
 80001c6:	70bb      	strb	r3, [r7, #2]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001c8:	2301      	movs	r3, #1
 80001ca:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_INIT(GPIOA, &KeyPad_Pins);
 80001cc:	463b      	mov	r3, r7
 80001ce:	4619      	mov	r1, r3
 80001d0:	482c      	ldr	r0, [pc, #176]	; (8000284 <Keypad_GPIO_Init+0x114>)
 80001d2:	f000 fd48 	bl	8000c66 <MCAL_GPIO_INIT>

	//==============================Set Output
    //C0
	KeyPad_Pins.GPIO_PinNumber = C0;
 80001d6:	2308      	movs	r3, #8
 80001d8:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001da:	2301      	movs	r3, #1
 80001dc:	70fb      	strb	r3, [r7, #3]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001de:	2304      	movs	r3, #4
 80001e0:	70bb      	strb	r3, [r7, #2]
	MCAL_GPIO_INIT(GPIOB, &KeyPad_Pins);
 80001e2:	463b      	mov	r3, r7
 80001e4:	4619      	mov	r1, r3
 80001e6:	4828      	ldr	r0, [pc, #160]	; (8000288 <Keypad_GPIO_Init+0x118>)
 80001e8:	f000 fd3d 	bl	8000c66 <MCAL_GPIO_INIT>
    //C1
	KeyPad_Pins.GPIO_PinNumber = C1;
 80001ec:	2310      	movs	r3, #16
 80001ee:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	70fb      	strb	r3, [r7, #3]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f4:	2304      	movs	r3, #4
 80001f6:	70bb      	strb	r3, [r7, #2]
	MCAL_GPIO_INIT(GPIOB, &KeyPad_Pins);
 80001f8:	463b      	mov	r3, r7
 80001fa:	4619      	mov	r1, r3
 80001fc:	4822      	ldr	r0, [pc, #136]	; (8000288 <Keypad_GPIO_Init+0x118>)
 80001fe:	f000 fd32 	bl	8000c66 <MCAL_GPIO_INIT>
    //C2
	KeyPad_Pins.GPIO_PinNumber = C2;
 8000202:	2320      	movs	r3, #32
 8000204:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000206:	2301      	movs	r3, #1
 8000208:	70fb      	strb	r3, [r7, #3]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800020a:	2304      	movs	r3, #4
 800020c:	70bb      	strb	r3, [r7, #2]
	MCAL_GPIO_INIT(GPIOB, &KeyPad_Pins);
 800020e:	463b      	mov	r3, r7
 8000210:	4619      	mov	r1, r3
 8000212:	481d      	ldr	r0, [pc, #116]	; (8000288 <Keypad_GPIO_Init+0x118>)
 8000214:	f000 fd27 	bl	8000c66 <MCAL_GPIO_INIT>
    //C3
	KeyPad_Pins.GPIO_PinNumber = C3;
 8000218:	2340      	movs	r3, #64	; 0x40
 800021a:	803b      	strh	r3, [r7, #0]
	KeyPad_Pins.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 800021c:	2301      	movs	r3, #1
 800021e:	70fb      	strb	r3, [r7, #3]
	KeyPad_Pins.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	2304      	movs	r3, #4
 8000222:	70bb      	strb	r3, [r7, #2]
	MCAL_GPIO_INIT(GPIOB, &KeyPad_Pins);
 8000224:	463b      	mov	r3, r7
 8000226:	4619      	mov	r1, r3
 8000228:	4817      	ldr	r0, [pc, #92]	; (8000288 <Keypad_GPIO_Init+0x118>)
 800022a:	f000 fd1c 	bl	8000c66 <MCAL_GPIO_INIT>

	//make all output HIGH
	for(i = 0; i < 4;++i)
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e00c      	b.n	800024e <Keypad_GPIO_Init+0xde>
	{
		MCAL_GPIO_WritePin(GPIOB, HIGH, Keypad_Col[i]);
 8000234:	4a15      	ldr	r2, [pc, #84]	; (800028c <Keypad_GPIO_Init+0x11c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	b29b      	uxth	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	2101      	movs	r1, #1
 8000242:	4811      	ldr	r0, [pc, #68]	; (8000288 <Keypad_GPIO_Init+0x118>)
 8000244:	f000 fd9e 	bl	8000d84 <MCAL_GPIO_WritePin>
	for(i = 0; i < 4;++i)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b03      	cmp	r3, #3
 8000252:	ddef      	ble.n	8000234 <Keypad_GPIO_Init+0xc4>
	}

	for(i = 0; i < 4;++i)
 8000254:	2300      	movs	r3, #0
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	e00c      	b.n	8000274 <Keypad_GPIO_Init+0x104>
	{
		MCAL_GPIO_WritePin(KeyPad_Input, HIGH, Keypad_Row[i]);
 800025a:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <Keypad_GPIO_Init+0x120>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	b29b      	uxth	r3, r3
 8000264:	461a      	mov	r2, r3
 8000266:	2101      	movs	r1, #1
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <Keypad_GPIO_Init+0x114>)
 800026a:	f000 fd8b 	bl	8000d84 <MCAL_GPIO_WritePin>
	for(i = 0; i < 4;++i)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b03      	cmp	r3, #3
 8000278:	ddef      	ble.n	800025a <Keypad_GPIO_Init+0xea>
	}

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000010 	.word	0x20000010
 8000290:	20000000 	.word	0x20000000

08000294 <Keypad_Selected_char>:

//===============================<Keypad_Selected_char Function>
char Keypad_Selected_char ()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	int i, j;
	//check is there is a selected button

		for (i = 0; i < 4; ++i)
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	e09b      	b.n	80003d8 <Keypad_Selected_char+0x144>
		{
			MCAL_GPIO_WritePin(KeyPad_Output, HIGH, C0);
 80002a0:	2208      	movs	r2, #8
 80002a2:	2101      	movs	r1, #1
 80002a4:	4851      	ldr	r0, [pc, #324]	; (80003ec <Keypad_Selected_char+0x158>)
 80002a6:	f000 fd6d 	bl	8000d84 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(KeyPad_Output, HIGH, C1);
 80002aa:	2210      	movs	r2, #16
 80002ac:	2101      	movs	r1, #1
 80002ae:	484f      	ldr	r0, [pc, #316]	; (80003ec <Keypad_Selected_char+0x158>)
 80002b0:	f000 fd68 	bl	8000d84 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(KeyPad_Output, HIGH, C2);
 80002b4:	2220      	movs	r2, #32
 80002b6:	2101      	movs	r1, #1
 80002b8:	484c      	ldr	r0, [pc, #304]	; (80003ec <Keypad_Selected_char+0x158>)
 80002ba:	f000 fd63 	bl	8000d84 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(KeyPad_Output, HIGH, C3);
 80002be:	2240      	movs	r2, #64	; 0x40
 80002c0:	2101      	movs	r1, #1
 80002c2:	484a      	ldr	r0, [pc, #296]	; (80003ec <Keypad_Selected_char+0x158>)
 80002c4:	f000 fd5e 	bl	8000d84 <MCAL_GPIO_WritePin>

			//Make Output LOW
			MCAL_GPIO_WritePin(KeyPad_Output, LOW, Keypad_Col[i]);
 80002c8:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <Keypad_Selected_char+0x15c>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	461a      	mov	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	4845      	ldr	r0, [pc, #276]	; (80003ec <Keypad_Selected_char+0x158>)
 80002d8:	f000 fd54 	bl	8000d84 <MCAL_GPIO_WritePin>

			for (j = 0; j < 4; ++j)
 80002dc:	2300      	movs	r3, #0
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e074      	b.n	80003cc <Keypad_Selected_char+0x138>
			{
				if (!(MCAL_GPIO_ReadPin(KeyPad_Input, Keypad_Row[j]))) //Check if it is the selected button
 80002e2:	4a44      	ldr	r2, [pc, #272]	; (80003f4 <Keypad_Selected_char+0x160>)
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4842      	ldr	r0, [pc, #264]	; (80003f8 <Keypad_Selected_char+0x164>)
 80002f0:	f000 fd34 	bl	8000d5c <MCAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d165      	bne.n	80003c6 <Keypad_Selected_char+0x132>
				{
					switch (i)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d862      	bhi.n	80003c6 <Keypad_Selected_char+0x132>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <Keypad_Selected_char+0x74>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	08000319 	.word	0x08000319
 800030c:	08000341 	.word	0x08000341
 8000310:	08000369 	.word	0x08000369
 8000314:	08000391 	.word	0x08000391
					{
					case 0:
						if (j == 0)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Keypad_Selected_char+0x8e>
							return '7';
 800031e:	2337      	movs	r3, #55	; 0x37
 8000320:	e05f      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 1)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d101      	bne.n	800032c <Keypad_Selected_char+0x98>
							return '4';
 8000328:	2334      	movs	r3, #52	; 0x34
 800032a:	e05a      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 2)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d101      	bne.n	8000336 <Keypad_Selected_char+0xa2>
							return '1';
 8000332:	2331      	movs	r3, #49	; 0x31
 8000334:	e055      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 3)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d13d      	bne.n	80003b8 <Keypad_Selected_char+0x124>
							return '?';
 800033c:	233f      	movs	r3, #63	; 0x3f
 800033e:	e050      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						break;
					case 1:
						if (j == 0)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <Keypad_Selected_char+0xb6>
							return '8';
 8000346:	2338      	movs	r3, #56	; 0x38
 8000348:	e04b      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 1)
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <Keypad_Selected_char+0xc0>
							return '5';
 8000350:	2335      	movs	r3, #53	; 0x35
 8000352:	e046      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 2)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <Keypad_Selected_char+0xca>
							return '2';
 800035a:	2332      	movs	r3, #50	; 0x32
 800035c:	e041      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 3)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d12b      	bne.n	80003bc <Keypad_Selected_char+0x128>
							return '0';
 8000364:	2330      	movs	r3, #48	; 0x30
 8000366:	e03c      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						break;
					case 2:
						if (j == 0)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <Keypad_Selected_char+0xde>
							return '9';
 800036e:	2339      	movs	r3, #57	; 0x39
 8000370:	e037      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 1)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d101      	bne.n	800037c <Keypad_Selected_char+0xe8>
							return '6';
 8000378:	2336      	movs	r3, #54	; 0x36
 800037a:	e032      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 2)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d101      	bne.n	8000386 <Keypad_Selected_char+0xf2>
							return '3';
 8000382:	2333      	movs	r3, #51	; 0x33
 8000384:	e02d      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 3)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d119      	bne.n	80003c0 <Keypad_Selected_char+0x12c>
							return '=';
 800038c:	233d      	movs	r3, #61	; 0x3d
 800038e:	e028      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						break;
					case 3:
						if (j == 0)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d101      	bne.n	800039a <Keypad_Selected_char+0x106>
							return '/';
 8000396:	232f      	movs	r3, #47	; 0x2f
 8000398:	e023      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 1)
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d101      	bne.n	80003a4 <Keypad_Selected_char+0x110>
							return '*';
 80003a0:	232a      	movs	r3, #42	; 0x2a
 80003a2:	e01e      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 2)
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d101      	bne.n	80003ae <Keypad_Selected_char+0x11a>
							return '-';
 80003aa:	232d      	movs	r3, #45	; 0x2d
 80003ac:	e019      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						else if (j == 3)
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d107      	bne.n	80003c4 <Keypad_Selected_char+0x130>
							return '+';
 80003b4:	232b      	movs	r3, #43	; 0x2b
 80003b6:	e014      	b.n	80003e2 <Keypad_Selected_char+0x14e>
						break;
 80003b8:	bf00      	nop
 80003ba:	e004      	b.n	80003c6 <Keypad_Selected_char+0x132>
						break;
 80003bc:	bf00      	nop
 80003be:	e002      	b.n	80003c6 <Keypad_Selected_char+0x132>
						break;
 80003c0:	bf00      	nop
 80003c2:	e000      	b.n	80003c6 <Keypad_Selected_char+0x132>
						break;
 80003c4:	bf00      	nop
			for (j = 0; j < 4; ++j)
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	dd87      	ble.n	80002e2 <Keypad_Selected_char+0x4e>
		for (i = 0; i < 4; ++i)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b03      	cmp	r3, #3
 80003dc:	f77f af60 	ble.w	80002a0 <Keypad_Selected_char+0xc>
					}
				}
			}
		}

return 'N';
 80003e0:	234e      	movs	r3, #78	; 0x4e
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	20000010 	.word	0x20000010
 80003f4:	20000000 	.word	0x20000000
 80003f8:	40010800 	.word	0x40010800

080003fc <Enter_C_Check>:

//===============================<Enter_C_Check Function>
void Enter_C_Check()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	int Flag = 1, Character;
 8000402:	2301      	movs	r3, #1
 8000404:	607b      	str	r3, [r7, #4]
    while (Flag)
 8000406:	e012      	b.n	800042e <Enter_C_Check+0x32>
    {
    	Character = Keypad_Selected_char();
 8000408:	f7ff ff44 	bl	8000294 <Keypad_Selected_char>
 800040c:	4603      	mov	r3, r0
 800040e:	603b      	str	r3, [r7, #0]
    	switch (Character)
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	2b3f      	cmp	r3, #63	; 0x3f
 8000414:	d001      	beq.n	800041a <Enter_C_Check+0x1e>
 8000416:	2b4e      	cmp	r3, #78	; 0x4e
    	{
		case 'N':
			break;
 8000418:	e001      	b.n	800041e <Enter_C_Check+0x22>
		case '?':
			Flag = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
    	}
    	while (Keypad_Selected_char() == Character);
 800041e:	bf00      	nop
 8000420:	f7ff ff38 	bl	8000294 <Keypad_Selected_char>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	4293      	cmp	r3, r2
 800042c:	d0f8      	beq.n	8000420 <Enter_C_Check+0x24>
    while (Flag)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1e9      	bne.n	8000408 <Enter_C_Check+0xc>
    }
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <LCD_GPIO_Init>:
 *                                             ============================
 */

//===============================<LCD_GPIO_Init Function>
void LCD_GPIO_Init ()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	GPIO_Config_t LCD_Pin;

	//=========================Control Pins
	//RW Pin
	LCD_Pin.GPIO_PinNumber = Rw_Pin;
 8000442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000446:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 8000448:	2302      	movs	r3, #2
 800044a:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800044c:	2304      	movs	r3, #4
 800044e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	483b      	ldr	r0, [pc, #236]	; (8000544 <LCD_GPIO_Init+0x108>)
 8000456:	f000 fc06 	bl	8000c66 <MCAL_GPIO_INIT>
	//RS Pin
	LCD_Pin.GPIO_PinNumber = Rs_Pin;
 800045a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800045e:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 8000460:	2302      	movs	r3, #2
 8000462:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000464:	2304      	movs	r3, #4
 8000466:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4835      	ldr	r0, [pc, #212]	; (8000544 <LCD_GPIO_Init+0x108>)
 800046e:	f000 fbfa 	bl	8000c66 <MCAL_GPIO_INIT>
	//Enable
	LCD_Pin.GPIO_PinNumber = E_Pin;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 8000478:	2302      	movs	r3, #2
 800047a:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800047c:	2304      	movs	r3, #4
 800047e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	482f      	ldr	r0, [pc, #188]	; (8000544 <LCD_GPIO_Init+0x108>)
 8000486:	f000 fbee 	bl	8000c66 <MCAL_GPIO_INIT>

	//=========================Data Pins
	//PinA0
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_0;
 800048a:	2301      	movs	r3, #1
 800048c:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 800048e:	2302      	movs	r3, #2
 8000490:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000492:	2304      	movs	r3, #4
 8000494:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	482a      	ldr	r0, [pc, #168]	; (8000544 <LCD_GPIO_Init+0x108>)
 800049c:	f000 fbe3 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA1
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_1;
 80004a0:	2302      	movs	r3, #2
 80004a2:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 80004a4:	2302      	movs	r3, #2
 80004a6:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a8:	2304      	movs	r3, #4
 80004aa:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4824      	ldr	r0, [pc, #144]	; (8000544 <LCD_GPIO_Init+0x108>)
 80004b2:	f000 fbd8 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA2
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_2;
 80004b6:	2304      	movs	r3, #4
 80004b8:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 80004ba:	2302      	movs	r3, #2
 80004bc:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004be:	2304      	movs	r3, #4
 80004c0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	481f      	ldr	r0, [pc, #124]	; (8000544 <LCD_GPIO_Init+0x108>)
 80004c8:	f000 fbcd 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA3
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_3;
 80004cc:	2308      	movs	r3, #8
 80004ce:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 80004d0:	2302      	movs	r3, #2
 80004d2:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d4:	2304      	movs	r3, #4
 80004d6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4819      	ldr	r0, [pc, #100]	; (8000544 <LCD_GPIO_Init+0x108>)
 80004de:	f000 fbc2 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA4
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_4;
 80004e2:	2310      	movs	r3, #16
 80004e4:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 80004e6:	2302      	movs	r3, #2
 80004e8:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ea:	2304      	movs	r3, #4
 80004ec:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4814      	ldr	r0, [pc, #80]	; (8000544 <LCD_GPIO_Init+0x108>)
 80004f4:	f000 fbb7 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA5
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_5;
 80004f8:	2320      	movs	r3, #32
 80004fa:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 80004fc:	2302      	movs	r3, #2
 80004fe:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000500:	2304      	movs	r3, #4
 8000502:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <LCD_GPIO_Init+0x108>)
 800050a:	f000 fbac 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA6
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_6;
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 8000512:	2302      	movs	r3, #2
 8000514:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000516:	2304      	movs	r3, #4
 8000518:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <LCD_GPIO_Init+0x108>)
 8000520:	f000 fba1 	bl	8000c66 <MCAL_GPIO_INIT>
	//PinA7
	LCD_Pin.GPIO_PinNumber = GPIO_PIN_7;
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	80bb      	strh	r3, [r7, #4]
	LCD_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_2M;
 8000528:	2302      	movs	r3, #2
 800052a:	71fb      	strb	r3, [r7, #7]
	LCD_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800052c:	2304      	movs	r3, #4
 800052e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &LCD_Pin);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4619      	mov	r1, r3
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <LCD_GPIO_Init+0x108>)
 8000536:	f000 fb96 	bl	8000c66 <MCAL_GPIO_INIT>

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010800 	.word	0x40010800

08000548 <LCD_Init>:

//===============================<LCD_Init Function>
void LCD_Init ()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	_delay_ms(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f000 f91f 	bl	8000790 <_delay_ms>
	_delay_ms(1);                    //To make sure it is not Busy
 8000552:	2001      	movs	r0, #1
 8000554:	f000 f91c 	bl	8000790 <_delay_ms>
	//Reset LCD_Data_Pins
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);
 8000558:	21ff      	movs	r1, #255	; 0xff
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <LCD_Init+0x34>)
 800055c:	f000 fafb 	bl	8000b56 <MCAL_GPIO_Reset_Output_Particular>
	_delay_ms(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f000 f915 	bl	8000790 <_delay_ms>
	//LCD_Send_Command(Clear_Display);  //Clear display

	//==============Suppose we are in Eight bit Mode
    #ifdef Eight_bit_Mode
    //Command to make it in 8-bit Mode
	LCD_Send_Command(Function_Set_8_bit_Mode_Line_2);
 8000566:	2038      	movs	r0, #56	; 0x38
 8000568:	f000 f820 	bl	80005ac <LCD_Send_Command>
	_delay_ms(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 f90f 	bl	8000790 <_delay_ms>
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
    //Send command
    MCAL_GPIO_Set_Output_Particular(LCD_Data_Pins, Function_Set_4_bit_Mode_Line_2);
    LCD_E_on_E_off();
    #endif
    LCD_Send_Command(Entry_Mode);                      //Entry
 8000572:	2006      	movs	r0, #6
 8000574:	f000 f81a 	bl	80005ac <LCD_Send_Command>

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40010800 	.word	0x40010800

08000580 <LCD_E_on_E_off>:


//===============================<LCD_E_on_E_off Function>
void LCD_E_on_E_off ()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_Control_Pins, HIGH, E_Pin);      //Set E on
 8000584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000588:	2101      	movs	r1, #1
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <LCD_E_on_E_off+0x28>)
 800058c:	f000 fbfa 	bl	8000d84 <MCAL_GPIO_WritePin>
	_delay_ms(1);                                          //Delay
 8000590:	2001      	movs	r0, #1
 8000592:	f000 f8fd 	bl	8000790 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_Control_Pins, LOW, E_Pin);       //Set E off
 8000596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059a:	2100      	movs	r1, #0
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <LCD_E_on_E_off+0x28>)
 800059e:	f000 fbf1 	bl	8000d84 <MCAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800

080005ac <LCD_Send_Command>:


//===============================<LCD_Send_Command Function>
void LCD_Send_Command (int Com)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	_delay_ms(1);                                                      //To make sure it is not Busy
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 f8eb 	bl	8000790 <_delay_ms>
    MCAL_GPIO_WritePin(LCD_Control_Pins, LOW, Rs_Pin);                  //Set RS off
 80005ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005be:	2100      	movs	r1, #0
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LCD_Send_Command+0x48>)
 80005c2:	f000 fbdf 	bl	8000d84 <MCAL_GPIO_WritePin>
	//==============Eight_bit_Mode
    #ifdef Eight_bit_Mode
	//Send Command
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
 80005c6:	21ff      	movs	r1, #255	; 0xff
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <LCD_Send_Command+0x48>)
 80005ca:	f000 fac4 	bl	8000b56 <MCAL_GPIO_Reset_Output_Particular>
    MCAL_GPIO_Set_Output_Particular(LCD_Data_Pins, Com);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <LCD_Send_Command+0x48>)
 80005d6:	f000 fad0 	bl	8000b7a <MCAL_GPIO_Set_Output_Particular>
	_delay_ms(1);                                                       //Small delay
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 f8d8 	bl	8000790 <_delay_ms>
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
	//Send second piece from Command
    MCAL_GPIO_Set_Output_Particular(LCD_Data_Pins, ((Com & 0x0F) << 4) );
    #endif
	//Receive Command
	LCD_E_on_E_off();
 80005e0:	f7ff ffce 	bl	8000580 <LCD_E_on_E_off>
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
 80005e4:	21ff      	movs	r1, #255	; 0xff
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <LCD_Send_Command+0x48>)
 80005e8:	f000 fab5 	bl	8000b56 <MCAL_GPIO_Reset_Output_Particular>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800

080005f8 <LCD_Send_char>:


//===============================<LCD_Send_char Function>
void LCD_Send_char (char Character)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	_delay_ms(1);                //To make sure it is not Busy
 8000602:	2001      	movs	r0, #1
 8000604:	f000 f8c4 	bl	8000790 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_Control_Pins, HIGH, Rs_Pin);
 8000608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060c:	2101      	movs	r1, #1
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <LCD_Send_char+0x4c>)
 8000610:	f000 fbb8 	bl	8000d84 <MCAL_GPIO_WritePin>
	//==============Eight_bit_Mode
	#ifdef Eight_bit_Mode
	//Send data
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
 8000614:	21ff      	movs	r1, #255	; 0xff
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <LCD_Send_char+0x4c>)
 8000618:	f000 fa9d 	bl	8000b56 <MCAL_GPIO_Reset_Output_Particular>
    MCAL_GPIO_Set_Output_Particular(LCD_Data_Pins, Character);          //Send Data To Eight Pins
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	b29b      	uxth	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <LCD_Send_char+0x4c>)
 8000624:	f000 faa9 	bl	8000b7a <MCAL_GPIO_Set_Output_Particular>
    LCD_E_on_E_off();
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
    //Send second piece from Command
    MCAL_GPIO_Set_Output_Particular(LCD_Data_Pins, ((Character & 0x0F) << 4));
   #endif
    _delay_ms(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f8b1 	bl	8000790 <_delay_ms>
	//Receive data
    LCD_E_on_E_off();
 800062e:	f7ff ffa7 	bl	8000580 <LCD_E_on_E_off>
    MCAL_GPIO_Reset_Output_Particular(LCD_Data_Pins, LCD_Data_Val);  	//Reset LCD_Data_Pins
 8000632:	21ff      	movs	r1, #255	; 0xff
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <LCD_Send_char+0x4c>)
 8000636:	f000 fa8e 	bl	8000b56 <MCAL_GPIO_Reset_Output_Particular>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010800 	.word	0x40010800

08000648 <LCD_Send_string>:



//===============================<LCD_Send_string Function>
void LCD_Send_string (char* String)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	int Count = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	while(*String)
 8000654:	e01a      	b.n	800068c <LCD_Send_string+0x44>
	{
        LCD_Send_char(*String++);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ffca 	bl	80005f8 <LCD_Send_char>
        Count++;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
        if(Count == 16)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b10      	cmp	r3, #16
 800066e:	d102      	bne.n	8000676 <LCD_Send_string+0x2e>
        {
        	//Cursor in the  Line 2
        	LCD_Send_Command(Cursor_in_begining_of_Line_2);
 8000670:	20c0      	movs	r0, #192	; 0xc0
 8000672:	f7ff ff9b 	bl	80005ac <LCD_Send_Command>
	    }
        if(Count == 31)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b1f      	cmp	r3, #31
 800067a:	d107      	bne.n	800068c <LCD_Send_string+0x44>
        {
            Count = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
            LCD_Send_Command(Clear_Display);
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ff93 	bl	80005ac <LCD_Send_Command>
            LCD_Send_Command(Cursor_in_begining_of_Line_1);
 8000686:	2080      	movs	r0, #128	; 0x80
 8000688:	f7ff ff90 	bl	80005ac <LCD_Send_Command>
	while(*String)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1e0      	bne.n	8000656 <LCD_Send_string+0xe>
        }
	}
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_7_Segment_GPIO_Init>:
 */


//===============================<_7_Segment_GPIO_Init Function>
void _7_Segment_GPIO_Init ()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	GPIO_Config_t _7_Segment_Pin;

	//==========7 Segment Pins
	//PinA8
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_8;
 80006a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a6:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006a8:	2301      	movs	r3, #1
 80006aa:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006ac:	2304      	movs	r3, #4
 80006ae:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT (GPIOB, &_7_Segment_Pin);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4827      	ldr	r0, [pc, #156]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 80006b6:	f000 fad6 	bl	8000c66 <MCAL_GPIO_INIT>

	//PinA9
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_9;
 80006ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006be:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006c0:	2301      	movs	r3, #1
 80006c2:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006c4:	2304      	movs	r3, #4
 80006c6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT (GPIOB, &_7_Segment_Pin);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 80006ce:	f000 faca 	bl	8000c66 <MCAL_GPIO_INIT>

	//PinA10
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_10;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006d8:	2301      	movs	r3, #1
 80006da:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006dc:	2304      	movs	r3, #4
 80006de:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT (GPIOB, &_7_Segment_Pin);
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 80006e6:	f000 fabe 	bl	8000c66 <MCAL_GPIO_INIT>

	//PinA11
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_11;
 80006ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ee:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80006f0:	2301      	movs	r3, #1
 80006f2:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006f4:	2304      	movs	r3, #4
 80006f6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT (GPIOB, &_7_Segment_Pin);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4815      	ldr	r0, [pc, #84]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 80006fe:	f000 fab2 	bl	8000c66 <MCAL_GPIO_INIT>

	//PinA12
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_12;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000708:	2301      	movs	r3, #1
 800070a:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800070c:	2304      	movs	r3, #4
 800070e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT (GPIOB, &_7_Segment_Pin);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4619      	mov	r1, r3
 8000714:	480f      	ldr	r0, [pc, #60]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 8000716:	f000 faa6 	bl	8000c66 <MCAL_GPIO_INIT>

	//PinA13
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_13;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000720:	2301      	movs	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000724:	2304      	movs	r3, #4
 8000726:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT (GPIOB, &_7_Segment_Pin);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 800072e:	f000 fa9a 	bl	8000c66 <MCAL_GPIO_INIT>

	//PinA14
	_7_Segment_Pin.GPIO_PinNumber = GPIO_PIN_14;
 8000732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000736:	80bb      	strh	r3, [r7, #4]
	_7_Segment_Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000738:	2301      	movs	r3, #1
 800073a:	71fb      	strb	r3, [r7, #7]
	_7_Segment_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800073c:	2304      	movs	r3, #4
 800073e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Set_Output_Particular (GPIOB, 0xff << 8);
 8000740:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <_7_Segment_GPIO_Init+0xb8>)
 8000746:	f000 fa18 	bl	8000b7a <MCAL_GPIO_Set_Output_Particular>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010c00 	.word	0x40010c00

08000758 <_7_Segment_Display>:


//===============================<_7_Segment_Display Function>
 void _7_Segment_Display (int i)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	//Clean 7-Segment
	MCAL_GPIO_Set_Output_Particular (GPIOB, 0xEf << 8);
 8000760:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <_7_Segment_Display+0x30>)
 8000766:	f000 fa08 	bl	8000b7a <MCAL_GPIO_Set_Output_Particular>
	//Display The Number
	MCAL_GPIO_Reset_Output_Particular (GPIOB, _7_Segment[i] << 8);
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <_7_Segment_Display+0x34>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000772:	b29b      	uxth	r3, r3
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b29b      	uxth	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <_7_Segment_Display+0x30>)
 800077c:	f000 f9eb 	bl	8000b56 <MCAL_GPIO_Reset_Output_Particular>

}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40010c00 	.word	0x40010c00
 800078c:	20000020 	.word	0x20000020

08000790 <_delay_ms>:
//                          *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*


//===============================<_delay_ms Function>
void _delay_ms(uint32_t Time )
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for(i = 0;i < 100;i++)
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e00b      	b.n	80007b6 <_delay_ms+0x26>
	for(j = 0;j < 150;j++);
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	e002      	b.n	80007aa <_delay_ms+0x1a>
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	3301      	adds	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	2b95      	cmp	r3, #149	; 0x95
 80007ae:	d9f9      	bls.n	80007a4 <_delay_ms+0x14>
	for(i = 0;i < 100;i++)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b63      	cmp	r3, #99	; 0x63
 80007ba:	d9f0      	bls.n	800079e <_delay_ms+0xe>
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <Clock_Init>:

//===============================<Clock_Init Function>
void Clock_Init()
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	//Enable Clocks
	E_GPIOA_CLK();
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <Clock_Init+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <Clock_Init+0x2c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f042 0204 	orr.w	r2, r2, #4
 80007da:	619a      	str	r2, [r3, #24]
	E_GPIOB_CLK();
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <Clock_Init+0x2c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <Clock_Init+0x2c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0208 	orr.w	r2, r2, #8
 80007ea:	619a      	str	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000048 	.word	0x20000048

080007f8 <main>:
/*                                             ============================
 *============================================*        Main Implement      *============================================
 *                                             ============================
 */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
	int Count = 0, Flag = 1, i = 0, Faild_Num = 0, Flag_2 = 1;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000802:	2301      	movs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
	GPIO_Config_t Pin;
	char Password[15] = "292003", Character;               /*The Password*/
 8000812:	4aae      	ldr	r2, [pc, #696]	; (8000acc <main+0x2d4>)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800081a:	6018      	str	r0, [r3, #0]
 800081c:	3304      	adds	r3, #4
 800081e:	8019      	strh	r1, [r3, #0]
 8000820:	3302      	adds	r3, #2
 8000822:	0c0a      	lsrs	r2, r1, #16
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	f107 030b 	add.w	r3, r7, #11
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

	Clock_Init();                                          /*Clock init*/
 8000830:	f7ff ffca 	bl	80007c8 <Clock_Init>
	LCD_GPIO_Init();                                       /*LCD GPIO init*/
 8000834:	f7ff fe02 	bl	800043c <LCD_GPIO_Init>
	_7_Segment_GPIO_Init();                                /*_7_Segment init*/
 8000838:	f7ff ff30 	bl	800069c <_7_Segment_GPIO_Init>
	Keypad_GPIO_Init();                                    /*Keypad GPIO init*/
 800083c:	f7ff fc98 	bl	8000170 <Keypad_GPIO_Init>
    LCD_Init();                                            /*LCD Init*/
 8000840:	f7ff fe82 	bl	8000548 <LCD_Init>

	//==========Init Motor Pin
	Pin.GPIO_PinNumber = GPIO_PIN_15;
 8000844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000848:	82bb      	strh	r3, [r7, #20]
	Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 800084a:	2301      	movs	r3, #1
 800084c:	75fb      	strb	r3, [r7, #23]
	Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800084e:	2304      	movs	r3, #4
 8000850:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_INIT(GPIOB, &Pin);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	489d      	ldr	r0, [pc, #628]	; (8000ad0 <main+0x2d8>)
 800085a:	f000 fa04 	bl	8000c66 <MCAL_GPIO_INIT>

	//==========Init Mode Pin
	Pin.GPIO_PinNumber = GPIO_PIN_7;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	82bb      	strh	r3, [r7, #20]
	Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000862:	2301      	movs	r3, #1
 8000864:	75fb      	strb	r3, [r7, #23]
	Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000866:	2304      	movs	r3, #4
 8000868:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_INIT(GPIOB, &Pin);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4897      	ldr	r0, [pc, #604]	; (8000ad0 <main+0x2d8>)
 8000872:	f000 f9f8 	bl	8000c66 <MCAL_GPIO_INIT>

	//==========Reset Mode Pin
	Pin.GPIO_PinNumber = GPIO_PIN_1;
 8000876:	2302      	movs	r3, #2
 8000878:	82bb      	strh	r3, [r7, #20]
	Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 800087a:	2301      	movs	r3, #1
 800087c:	75fb      	strb	r3, [r7, #23]
	Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800087e:	2304      	movs	r3, #4
 8000880:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_INIT(GPIOB, &Pin);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4891      	ldr	r0, [pc, #580]	; (8000ad0 <main+0x2d8>)
 800088a:	f000 f9ec 	bl	8000c66 <MCAL_GPIO_INIT>

	//==========Buzzer Pin
	Pin.GPIO_PinNumber = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	82bb      	strh	r3, [r7, #20]
	Pin.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000894:	2301      	movs	r3, #1
 8000896:	75fb      	strb	r3, [r7, #23]
	Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000898:	2304      	movs	r3, #4
 800089a:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_INIT(GPIOA, &Pin);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	488c      	ldr	r0, [pc, #560]	; (8000ad4 <main+0x2dc>)
 80008a4:	f000 f9df 	bl	8000c66 <MCAL_GPIO_INIT>

	while (1)
	{
		/*******************************Lock system implementation********************************/
		Enter_C_Check();                                       /*Check if he select C/on*/
 80008a8:	f7ff fda8 	bl	80003fc <Enter_C_Check>
		Flag_2 = 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61fb      	str	r3, [r7, #28]
		LCD_Send_Command(Display_on_Cursor_on);                /*Display_on_Cursor_on*/
 80008b0:	200e      	movs	r0, #14
 80008b2:	f7ff fe7b 	bl	80005ac <LCD_Send_Command>
		while (Flag_2)
 80008b6:	e104      	b.n	8000ac2 <main+0x2ca>
		{
			LCD_Send_string("password:");                      /*Print Password*/
 80008b8:	4887      	ldr	r0, [pc, #540]	; (8000ad8 <main+0x2e0>)
 80008ba:	f7ff fec5 	bl	8000648 <LCD_Send_string>
			LCD_Send_Command(Cursor_in_begining_of_Line_2);    /*Go to Second Line*/
 80008be:	20c0      	movs	r0, #192	; 0xc0
 80008c0:	f7ff fe74 	bl	80005ac <LCD_Send_Command>
			LCD_Send_string("         ");                      /*Print Spaces*/
 80008c4:	4885      	ldr	r0, [pc, #532]	; (8000adc <main+0x2e4>)
 80008c6:	f7ff febf 	bl	8000648 <LCD_Send_string>
			while (Flag)
 80008ca:	e026      	b.n	800091a <main+0x122>
			{
				Character = Keypad_Selected_char();
 80008cc:	f7ff fce2 	bl	8000294 <Keypad_Selected_char>
 80008d0:	4603      	mov	r3, r0
 80008d2:	76fb      	strb	r3, [r7, #27]
				switch (Character)
 80008d4:	7efb      	ldrb	r3, [r7, #27]
 80008d6:	2b3d      	cmp	r3, #61	; 0x3d
 80008d8:	d002      	beq.n	80008e0 <main+0xe8>
 80008da:	2b4e      	cmp	r3, #78	; 0x4e
 80008dc:	d103      	bne.n	80008e6 <main+0xee>
				{

				case 'N':           /*No character is Selected*/
					break;
 80008de:	e01c      	b.n	800091a <main+0x122>
					//==============
				case '=':           /*Finish from Entering password*/

					Flag = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
					break;
 80008e4:	e019      	b.n	800091a <main+0x122>
					//==============
				default:            /*Write character on screen*/
					LCD_Send_char(Character);
 80008e6:	7efb      	ldrb	r3, [r7, #27]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe85 	bl	80005f8 <LCD_Send_char>
					if (Character == Password[i])
 80008ee:	1d3a      	adds	r2, r7, #4
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	7efa      	ldrb	r2, [r7, #27]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d102      	bne.n	8000902 <main+0x10a>
					{
						Count++;
 80008fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fe:	3301      	adds	r3, #1
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
					i++;
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	3301      	adds	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
					while (Keypad_Selected_char() == Character)
 8000908:	bf00      	nop
 800090a:	f7ff fcc3 	bl	8000294 <Keypad_Selected_char>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	7efb      	ldrb	r3, [r7, #27]
 8000914:	4293      	cmp	r3, r2
 8000916:	d0f8      	beq.n	800090a <main+0x112>
						;
					break;
 8000918:	bf00      	nop
			while (Flag)
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1d5      	bne.n	80008cc <main+0xd4>
					//==============
				}
			}
			LCD_Send_Command(Clear_Display);
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe43 	bl	80005ac <LCD_Send_Command>
			if (Count == 6)
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	2b06      	cmp	r3, #6
 800092a:	f040 8093 	bne.w	8000a54 <main+0x25c>
			{
				/************************Printing Password is Correct**************************/
				LCD_Send_string("Password is");
 800092e:	486c      	ldr	r0, [pc, #432]	; (8000ae0 <main+0x2e8>)
 8000930:	f7ff fe8a 	bl	8000648 <LCD_Send_string>
				LCD_Send_Command(Cursor_in_begining_of_Line_2);     /*Go to Second Line*/
 8000934:	20c0      	movs	r0, #192	; 0xc0
 8000936:	f7ff fe39 	bl	80005ac <LCD_Send_Command>
				LCD_Send_string("         Correct");
 800093a:	486a      	ldr	r0, [pc, #424]	; (8000ae4 <main+0x2ec>)
 800093c:	f7ff fe84 	bl	8000648 <LCD_Send_string>
				_delay_ms(5);
 8000940:	2005      	movs	r0, #5
 8000942:	f7ff ff25 	bl	8000790 <_delay_ms>
				LCD_Send_Command(Clear_Display);                    /*Clear Display*/
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fe30 	bl	80005ac <LCD_Send_Command>
				Character = '0';
 800094c:	2330      	movs	r3, #48	; 0x30
 800094e:	76fb      	strb	r3, [r7, #27]
				while (Character != '1' && Character != '2')
 8000950:	e056      	b.n	8000a00 <main+0x208>
				{
					LCD_Send_string("Choose Mode:");                /*Print Question*/
 8000952:	4865      	ldr	r0, [pc, #404]	; (8000ae8 <main+0x2f0>)
 8000954:	f7ff fe78 	bl	8000648 <LCD_Send_string>
					_delay_ms(5);
 8000958:	2005      	movs	r0, #5
 800095a:	f7ff ff19 	bl	8000790 <_delay_ms>
					LCD_Send_Command(Clear_Display);                /*Clear Display*/
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fe24 	bl	80005ac <LCD_Send_Command>
					LCD_Send_string("1) Get out Fast");             /*Print First Mode*/
 8000964:	4861      	ldr	r0, [pc, #388]	; (8000aec <main+0x2f4>)
 8000966:	f7ff fe6f 	bl	8000648 <LCD_Send_string>
					LCD_Send_Command(Cursor_in_begining_of_Line_2); /*Go to Second Line*/
 800096a:	20c0      	movs	r0, #192	; 0xc0
 800096c:	f7ff fe1e 	bl	80005ac <LCD_Send_Command>
					LCD_Send_string("2) Resident");                 /*Print second Mode*/
 8000970:	485f      	ldr	r0, [pc, #380]	; (8000af0 <main+0x2f8>)
 8000972:	f7ff fe69 	bl	8000648 <LCD_Send_string>
					_delay_ms(5);
 8000976:	2005      	movs	r0, #5
 8000978:	f7ff ff0a 	bl	8000790 <_delay_ms>
					LCD_Send_Command(Clear_Display);                /*Clear Display*/
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fe15 	bl	80005ac <LCD_Send_Command>
					LCD_Send_string("Your Choice : ");              /*User answer*/
 8000982:	485c      	ldr	r0, [pc, #368]	; (8000af4 <main+0x2fc>)
 8000984:	f7ff fe60 	bl	8000648 <LCD_Send_string>
					Flag = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
					while (Flag)
 800098c:	e015      	b.n	80009ba <main+0x1c2>
					{
						Character = Keypad_Selected_char();         /*Get Mode*/
 800098e:	f7ff fc81 	bl	8000294 <Keypad_Selected_char>
 8000992:	4603      	mov	r3, r0
 8000994:	76fb      	strb	r3, [r7, #27]
						switch (Character)
 8000996:	7efb      	ldrb	r3, [r7, #27]
 8000998:	2b4e      	cmp	r3, #78	; 0x4e
 800099a:	d100      	bne.n	800099e <main+0x1a6>
						{
						case 'N':
							break;
 800099c:	e00d      	b.n	80009ba <main+0x1c2>
						default:
							Flag = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
							LCD_Send_char(Character);
 80009a2:	7efb      	ldrb	r3, [r7, #27]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe27 	bl	80005f8 <LCD_Send_char>
							while (Character == Keypad_Selected_char());
 80009aa:	bf00      	nop
 80009ac:	f7ff fc72 	bl	8000294 <Keypad_Selected_char>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	7efb      	ldrb	r3, [r7, #27]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d0f8      	beq.n	80009ac <main+0x1b4>
					while (Flag)
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1e6      	bne.n	800098e <main+0x196>
						}
					}
					if (Character == '1')
 80009c0:	7efb      	ldrb	r3, [r7, #27]
 80009c2:	2b31      	cmp	r3, #49	; 0x31
 80009c4:	d106      	bne.n	80009d4 <main+0x1dc>
					{
						MCAL_GPIO_WritePin(GPIOB, LOW, GPIO_PIN_14);  /*Mode_1*/
 80009c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ca:	2100      	movs	r1, #0
 80009cc:	4840      	ldr	r0, [pc, #256]	; (8000ad0 <main+0x2d8>)
 80009ce:	f000 f9d9 	bl	8000d84 <MCAL_GPIO_WritePin>
 80009d2:	e012      	b.n	80009fa <main+0x202>

					} else if (Character == '2')
 80009d4:	7efb      	ldrb	r3, [r7, #27]
 80009d6:	2b32      	cmp	r3, #50	; 0x32
 80009d8:	d106      	bne.n	80009e8 <main+0x1f0>
					{
						MCAL_GPIO_WritePin(GPIOB, HIGH, GPIO_PIN_14);  /*Mode_2*/
 80009da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009de:	2101      	movs	r1, #1
 80009e0:	483b      	ldr	r0, [pc, #236]	; (8000ad0 <main+0x2d8>)
 80009e2:	f000 f9cf 	bl	8000d84 <MCAL_GPIO_WritePin>
 80009e6:	e008      	b.n	80009fa <main+0x202>
					} else
					{
						LCD_Send_Command(Clear_Display);               /*Clear Display*/
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fddf 	bl	80005ac <LCD_Send_Command>
						LCD_Send_string("Wrong Choice");
 80009ee:	4842      	ldr	r0, [pc, #264]	; (8000af8 <main+0x300>)
 80009f0:	f7ff fe2a 	bl	8000648 <LCD_Send_string>
						_delay_ms(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fecb 	bl	8000790 <_delay_ms>
					}
					LCD_Send_Command(Clear_Display);                   /*Clear Display*/
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fdd6 	bl	80005ac <LCD_Send_Command>
				while (Character != '1' && Character != '2')
 8000a00:	7efb      	ldrb	r3, [r7, #27]
 8000a02:	2b31      	cmp	r3, #49	; 0x31
 8000a04:	d002      	beq.n	8000a0c <main+0x214>
 8000a06:	7efb      	ldrb	r3, [r7, #27]
 8000a08:	2b32      	cmp	r3, #50	; 0x32
 8000a0a:	d1a2      	bne.n	8000952 <main+0x15a>

				}
				Flag_2 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
				MCAL_GPIO_WritePin(Motor_Port, HIGH, Motor_Pin);       /*Turn Motor on*/
 8000a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a14:	2101      	movs	r1, #1
 8000a16:	482e      	ldr	r0, [pc, #184]	; (8000ad0 <main+0x2d8>)
 8000a18:	f000 f9b4 	bl	8000d84 <MCAL_GPIO_WritePin>
				MCAL_GPIO_WritePin(Reset_Port, HIGH, Reset_Pin);       /*Init Reset*/
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	2101      	movs	r1, #1
 8000a20:	482b      	ldr	r0, [pc, #172]	; (8000ad0 <main+0x2d8>)
 8000a22:	f000 f9af 	bl	8000d84 <MCAL_GPIO_WritePin>
				LCD_Send_string("WaitinG...");
 8000a26:	4835      	ldr	r0, [pc, #212]	; (8000afc <main+0x304>)
 8000a28:	f7ff fe0e 	bl	8000648 <LCD_Send_string>
                LCD_Send_Command(Display_on_Cursor_off);               /*Cursor off*/
 8000a2c:	200c      	movs	r0, #12
 8000a2e:	f7ff fdbd 	bl	80005ac <LCD_Send_Command>
                _delay_ms(40);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f7ff feac 	bl	8000790 <_delay_ms>
				MCAL_GPIO_WritePin(Motor_Port, LOW, Motor_Pin);        /*Turn Motor off*/
 8000a38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <main+0x2d8>)
 8000a40:	f000 f9a0 	bl	8000d84 <MCAL_GPIO_WritePin>
				Enter_C_Check();                                       /*Check if he select C/on*/
 8000a44:	f7ff fcda 	bl	80003fc <Enter_C_Check>
				MCAL_GPIO_WritePin(Reset_Port, LOW, Reset_Pin);        /*Reset on/
 8000a48:	2202      	movs	r2, #2
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <main+0x2d8>)
 8000a4e:	f000 f999 	bl	8000d84 <MCAL_GPIO_WritePin>
 8000a52:	e02d      	b.n	8000ab0 <main+0x2b8>
				MCAL_GPIO_WritePin(Mode_Port, LOW, Mode_Pin);          /*Turn Modes off*/

			} else
			{
				/************************Printing Password is Wrong***************************/
				LCD_Send_string("Password is");
 8000a54:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <main+0x2e8>)
 8000a56:	f7ff fdf7 	bl	8000648 <LCD_Send_string>
				LCD_Send_Command(Cursor_in_begining_of_Line_2);         /*Go to Second Line*/
 8000a5a:	20c0      	movs	r0, #192	; 0xc0
 8000a5c:	f7ff fda6 	bl	80005ac <LCD_Send_Command>
				LCD_Send_string("       WronG");
 8000a60:	4827      	ldr	r0, [pc, #156]	; (8000b00 <main+0x308>)
 8000a62:	f7ff fdf1 	bl	8000648 <LCD_Send_string>
				_delay_ms(5);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fe92 	bl	8000790 <_delay_ms>
				Faild_Num++;
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
				_7_Segment_Display(Faild_Num);
 8000a72:	6a38      	ldr	r0, [r7, #32]
 8000a74:	f7ff fe70 	bl	8000758 <_7_Segment_Display>
				if (Faild_Num == 3)
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d118      	bne.n	8000ab0 <main+0x2b8>
				{
					_delay_ms(20);
 8000a7e:	2014      	movs	r0, #20
 8000a80:	f7ff fe86 	bl	8000790 <_delay_ms>
					MCAL_GPIO_WritePin(Buzzer_Port, HIGH, Buzzer_Pin);   /*Buzzer on*/
 8000a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <main+0x2dc>)
 8000a8c:	f000 f97a 	bl	8000d84 <MCAL_GPIO_WritePin>
					_delay_ms(100);
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f7ff fe7d 	bl	8000790 <_delay_ms>
					MCAL_GPIO_WritePin(Buzzer_Port, LOW, Buzzer_Pin);    /*Buzzer off*/
 8000a96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <main+0x2dc>)
 8000a9e:	f000 f971 	bl	8000d84 <MCAL_GPIO_WritePin>
					MCAL_GPIO_Set_Output_Particular(GPIOB, 0xEf << 8);   /*Clean 7_segment*/
 8000aa2:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <main+0x2d8>)
 8000aa8:	f000 f867 	bl	8000b7a <MCAL_GPIO_Set_Output_Particular>
					Faild_Num = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
				}
			}
			i = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
			Count = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
			Flag = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
			LCD_Send_Command(Clear_Display);                             /*Clear Display*/
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fd75 	bl	80005ac <LCD_Send_Command>
		while (Flag_2)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f47f aef7 	bne.w	80008b8 <main+0xc0>
		Enter_C_Check();                                       /*Check if he select C/on*/
 8000aca:	e6ed      	b.n	80008a8 <main+0xb0>
 8000acc:	08000eb4 	.word	0x08000eb4
 8000ad0:	40010c00 	.word	0x40010c00
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	08000e14 	.word	0x08000e14
 8000adc:	08000e20 	.word	0x08000e20
 8000ae0:	08000e2c 	.word	0x08000e2c
 8000ae4:	08000e38 	.word	0x08000e38
 8000ae8:	08000e4c 	.word	0x08000e4c
 8000aec:	08000e5c 	.word	0x08000e5c
 8000af0:	08000e6c 	.word	0x08000e6c
 8000af4:	08000e78 	.word	0x08000e78
 8000af8:	08000e88 	.word	0x08000e88
 8000afc:	08000e98 	.word	0x08000e98
 8000b00:	08000ea4 	.word	0x08000ea4

08000b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b32:	f000 f93f 	bl	8000db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fe5f 	bl	80007f8 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000b48:	08000ecc 	.word	0x08000ecc
  ldr r2, =_sbss
 8000b4c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000b50:	20000068 	.word	0x20000068

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>

08000b56 <MCAL_GPIO_Reset_Output_Particular>:
 *                                             ============================
 */

//===============================<MCAL_GPIO_Reset_Output_Particular Function>
void MCAL_GPIO_Reset_Output_Particular(GPIO_t* GPIOX, uint16_t Portx_Val)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR &= ~(uint32_t)(Portx_Val);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <MCAL_GPIO_Set_Output_Particular>:

//===============================<MCAL_GPIO_Set_Output_Particular Function>
void MCAL_GPIO_Set_Output_Particular(GPIO_t* GPIOX, uint16_t Portx_Val)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	460b      	mov	r3, r1
 8000b84:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR |= (uint32_t)(Portx_Val);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60da      	str	r2, [r3, #12]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Get_Pin_Bit_Position>:


//===============================<Get_Pin_Bit_Position Function>
uint8_t Get_Pin_Bit_Position(uint16_t PinNumber)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d01a      	beq.n	8000be2 <Get_Pin_Bit_Position+0x46>
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	dc06      	bgt.n	8000bbe <Get_Pin_Bit_Position+0x22>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d012      	beq.n	8000bda <Get_Pin_Bit_Position+0x3e>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d012      	beq.n	8000bde <Get_Pin_Bit_Position+0x42>
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d00c      	beq.n	8000bd6 <Get_Pin_Bit_Position+0x3a>
 8000bbc:	e01b      	b.n	8000bf6 <Get_Pin_Bit_Position+0x5a>
 8000bbe:	2b20      	cmp	r3, #32
 8000bc0:	d013      	beq.n	8000bea <Get_Pin_Bit_Position+0x4e>
 8000bc2:	2b20      	cmp	r3, #32
 8000bc4:	dc02      	bgt.n	8000bcc <Get_Pin_Bit_Position+0x30>
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d00d      	beq.n	8000be6 <Get_Pin_Bit_Position+0x4a>
 8000bca:	e014      	b.n	8000bf6 <Get_Pin_Bit_Position+0x5a>
 8000bcc:	2b40      	cmp	r3, #64	; 0x40
 8000bce:	d00e      	beq.n	8000bee <Get_Pin_Bit_Position+0x52>
 8000bd0:	2b80      	cmp	r3, #128	; 0x80
 8000bd2:	d00e      	beq.n	8000bf2 <Get_Pin_Bit_Position+0x56>
 8000bd4:	e00f      	b.n	8000bf6 <Get_Pin_Bit_Position+0x5a>
	{
	case GPIO_PIN_0:
		return 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e040      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_1:
		return 4;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e03e      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_2:
		return 8;
 8000bde:	2308      	movs	r3, #8
 8000be0:	e03c      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_3:
		return 12;
 8000be2:	230c      	movs	r3, #12
 8000be4:	e03a      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_4:
		return 16;
 8000be6:	2310      	movs	r3, #16
 8000be8:	e038      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_5:
		return 20;
 8000bea:	2314      	movs	r3, #20
 8000bec:	e036      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_6:
		return 24;
 8000bee:	2318      	movs	r3, #24
 8000bf0:	e034      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_7:
		return 28;
 8000bf2:	231c      	movs	r3, #28
 8000bf4:	e032      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	}
	switch (PinNumber)
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bfc:	d023      	beq.n	8000c46 <Get_Pin_Bit_Position+0xaa>
 8000bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c02:	dc09      	bgt.n	8000c18 <Get_Pin_Bit_Position+0x7c>
 8000c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c08:	d019      	beq.n	8000c3e <Get_Pin_Bit_Position+0xa2>
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d018      	beq.n	8000c42 <Get_Pin_Bit_Position+0xa6>
 8000c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c14:	d011      	beq.n	8000c3a <Get_Pin_Bit_Position+0x9e>
 8000c16:	e020      	b.n	8000c5a <Get_Pin_Bit_Position+0xbe>
 8000c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c1c:	d017      	beq.n	8000c4e <Get_Pin_Bit_Position+0xb2>
 8000c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c22:	dc03      	bgt.n	8000c2c <Get_Pin_Bit_Position+0x90>
 8000c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c28:	d00f      	beq.n	8000c4a <Get_Pin_Bit_Position+0xae>
 8000c2a:	e016      	b.n	8000c5a <Get_Pin_Bit_Position+0xbe>
 8000c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c30:	d00f      	beq.n	8000c52 <Get_Pin_Bit_Position+0xb6>
 8000c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c36:	d00e      	beq.n	8000c56 <Get_Pin_Bit_Position+0xba>
 8000c38:	e00f      	b.n	8000c5a <Get_Pin_Bit_Position+0xbe>
	{
	case GPIO_PIN_8:
		return 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e00e      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_9:
		return 4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e00c      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_10:
		return 8;
 8000c42:	2308      	movs	r3, #8
 8000c44:	e00a      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_11:
		return 12;
 8000c46:	230c      	movs	r3, #12
 8000c48:	e008      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_12:
		return 16;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	e006      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_13:
		return 20;
 8000c4e:	2314      	movs	r3, #20
 8000c50:	e004      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_14:
		return 24;
 8000c52:	2318      	movs	r3, #24
 8000c54:	e002      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_15:
		return 28;
 8000c56:	231c      	movs	r3, #28
 8000c58:	e000      	b.n	8000c5c <Get_Pin_Bit_Position+0xc0>
	}
	return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <MCAL_GPIO_INIT>:
 * @param [in] 		-pointer to structure that  include pin config
 * @retval 			-None
 * Note             -None
 */
void MCAL_GPIO_INIT(GPIO_t* GPIOX, GPIO_Config_t* PinConfig )
{
 8000c66:	b590      	push	{r4, r7, lr}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
	//Port Configuration register low (GPIOx_CRL) Configure PINS From 0 --> 7
	//Port Configuration register High (GPIOx_CRH) Configure PINS From 8 --> 15
	volatile uint32_t* RegisterConfig = (void*)0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
	uint8_t Config = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
	//Pin is is in Register CRL or CRH
	RegisterConfig = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	2bff      	cmp	r3, #255	; 0xff
 8000c7e:	d801      	bhi.n	8000c84 <MCAL_GPIO_INIT+0x1e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	e001      	b.n	8000c88 <MCAL_GPIO_INIT+0x22>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3304      	adds	r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]

	//Clear CNFX[1:0] MODEX[1:0]
	*RegisterConfig &= ~(0xf << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff84 	bl	8000b9c <Get_Pin_Bit_Position>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	601a      	str	r2, [r3, #0]

	//Is pin output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	789b      	ldrb	r3, [r3, #2]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d00b      	beq.n	8000cc8 <MCAL_GPIO_INIT+0x62>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d007      	beq.n	8000cc8 <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000cbc:	2b05      	cmp	r3, #5
 8000cbe:	d003      	beq.n	8000cc8 <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d10b      	bne.n	8000ce0 <MCAL_GPIO_INIT+0x7a>
	{
		//Set CNFX[1:0] MODEX[1:0]
		Config = ( ((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_SPEED) );
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	3b04      	subs	r3, #4
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	b25a      	sxtb	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	78db      	ldrb	r3, [r3, #3]
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e02b      	b.n	8000d38 <MCAL_GPIO_INIT+0xd2>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_Analog || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_Floating )
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <MCAL_GPIO_INIT+0x8a>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d104      	bne.n	8000cfa <MCAL_GPIO_INIT+0x94>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config = ( (PinConfig->GPIO_MODE) << 2);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e01e      	b.n	8000d38 <MCAL_GPIO_INIT+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF_OD)//Consider it as input floating
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d104      	bne.n	8000d0c <MCAL_GPIO_INIT+0xa6>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config = ( (PinConfig->GPIO_MODE) << 2);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	789b      	ldrb	r3, [r3, #2]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e015      	b.n	8000d38 <MCAL_GPIO_INIT+0xd2>
		}
		else //You deal with pull-up & pull-down
		{
			Config = (GPIO_MODE_INPUT_PU << 2);
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	789b      	ldrb	r3, [r3, #2]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d107      	bne.n	8000d28 <MCAL_GPIO_INIT+0xc2>
			{
				//Set ODR Register to make it pull-up
				GPIOX->ODR |= PinConfig->GPIO_PinNumber;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	8812      	ldrh	r2, [r2, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	e007      	b.n	8000d38 <MCAL_GPIO_INIT+0xd2>
			}
			else
			{
				//Set ODR Register to make it pull-down
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	60da      	str	r2, [r3, #12]
			}
		}
	}
    *RegisterConfig |= ( (Config) << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber) );
 8000d38:	7bfc      	ldrb	r4, [r7, #15]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff2c 	bl	8000b9c <Get_Pin_Bit_Position>
 8000d44:	4603      	mov	r3, r0
 8000d46:	fa04 f203 	lsl.w	r2, r4, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <MCAL_GPIO_ReadPin>:
 * @param [in] 		-Pin number
 * @retval 			-Return (High or Low)
 * Note             -None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_t* GPIOX, uint16_t PinNumber)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
	if( ((GPIOX->IDR & PinNumber) != LOW) )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MCAL_GPIO_ReadPin+0x1c>
	{
		return HIGH;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return LOW;
 8000d78:	2300      	movs	r3, #0
	}
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <MCAL_GPIO_WritePin>:
 * @param [in] 		-Pin number
 * @retval 			-None
 * Note             -None
 */
void  MCAL_GPIO_WritePin(GPIO_t* GPIOX, uint16_t Pinx_Val, uint16_t PinNumber)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
 8000d90:	4613      	mov	r3, r2
 8000d92:	803b      	strh	r3, [r7, #0]
	if(Pinx_Val != LOW )
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <MCAL_GPIO_WritePin+0x1e>
	{
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber;
 8000d9a:	883a      	ldrh	r2, [r7, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	611a      	str	r2, [r3, #16]
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}
}
 8000da0:	e002      	b.n	8000da8 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 8000da2:	883a      	ldrh	r2, [r7, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	615a      	str	r2, [r3, #20]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
	...

08000db4 <__libc_init_array>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	2500      	movs	r5, #0
 8000db8:	4e0c      	ldr	r6, [pc, #48]	; (8000dec <__libc_init_array+0x38>)
 8000dba:	4c0d      	ldr	r4, [pc, #52]	; (8000df0 <__libc_init_array+0x3c>)
 8000dbc:	1ba4      	subs	r4, r4, r6
 8000dbe:	10a4      	asrs	r4, r4, #2
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	d109      	bne.n	8000dd8 <__libc_init_array+0x24>
 8000dc4:	f000 f81a 	bl	8000dfc <_init>
 8000dc8:	2500      	movs	r5, #0
 8000dca:	4e0a      	ldr	r6, [pc, #40]	; (8000df4 <__libc_init_array+0x40>)
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <__libc_init_array+0x44>)
 8000dce:	1ba4      	subs	r4, r4, r6
 8000dd0:	10a4      	asrs	r4, r4, #2
 8000dd2:	42a5      	cmp	r5, r4
 8000dd4:	d105      	bne.n	8000de2 <__libc_init_array+0x2e>
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ddc:	4798      	blx	r3
 8000dde:	3501      	adds	r5, #1
 8000de0:	e7ee      	b.n	8000dc0 <__libc_init_array+0xc>
 8000de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000de6:	4798      	blx	r3
 8000de8:	3501      	adds	r5, #1
 8000dea:	e7f2      	b.n	8000dd2 <__libc_init_array+0x1e>
 8000dec:	08000ec4 	.word	0x08000ec4
 8000df0:	08000ec4 	.word	0x08000ec4
 8000df4:	08000ec4 	.word	0x08000ec4
 8000df8:	08000ec8 	.word	0x08000ec8

08000dfc <_init>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	bf00      	nop
 8000e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e02:	bc08      	pop	{r3}
 8000e04:	469e      	mov	lr, r3
 8000e06:	4770      	bx	lr

08000e08 <_fini>:
 8000e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0a:	bf00      	nop
 8000e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0e:	bc08      	pop	{r3}
 8000e10:	469e      	mov	lr, r3
 8000e12:	4770      	bx	lr
